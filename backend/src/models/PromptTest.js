const mongoose = require('mongoose');

const promptTestSchema = new mongoose.Schema({
  userId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'User', 
    required: true,
    index: true
  },
  promptId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'Prompt', 
    required: true,
    index: true
  },
  topicId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'Topic', 
    required: true 
  },
  personaId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'Persona', 
    required: true 
  },
  
  // Test Configuration
  promptText: { 
    type: String, 
    required: true 
  },
  queryType: { 
    type: String, 
    enum: ['Navigational', 'Commercial Investigation', 'Transactional', 'Comparative', 'Reputational'],
    required: true 
  },
  
  // LLM Provider Info
  llmProvider: { 
    type: String, 
    enum: ['openai', 'gemini', 'claude', 'perplexity'],
    required: true,
    index: true
  },
  llmModel: { 
    type: String, 
    required: true 
  },
  
  // Raw LLM Response
  rawResponse: { 
    type: String, 
    required: true 
  },
  responseTime: { 
    type: Number, 
    default: 0 
  }, // in milliseconds
  tokensUsed: { 
    type: Number, 
    default: 0 
  },
  cost: { 
    type: Number, 
    default: 0 
  }, // in USD
  
  // Scorecard (Generated by scoring LLM)
  scorecard: {
    // Brand Visibility Metrics
    brandMentioned: { type: Boolean, default: false },
    brandPosition: { type: Number, default: 0 }, // Position in response (0 = not mentioned)
    brandMentionCount: { type: Number, default: 0 },
    competitorsMentioned: [{ type: String }],
    visibilityScore: { type: Number, min: 0, max: 100, default: 0 },
    
    // Depth of Mention Metrics
    mentionDepth: { 
      type: String, 
      enum: ['none', 'shallow', 'moderate', 'detailed'],
      default: 'none'
    },
    contextQuality: { type: Number, min: 0, max: 100, default: 0 },
    sentencesAboutBrand: { type: Number, default: 0 },
    characterCount: { type: Number, default: 0 },
    
    // Citation & Trust Metrics
    citationPresent: { type: Boolean, default: false },
    citationType: { 
      type: String, 
      enum: ['none', 'direct_link', 'reference', 'mention'],
      default: 'none'
    },
    trustSignals: [{ type: String }],
    expertiseIndicators: { type: Number, min: 0, max: 100, default: 0 },
    
    // Competitive Position
    competitorCount: { type: Number, default: 0 },
    rankingPosition: { type: Number, default: 0 }, // Your position vs competitors (0 = not ranked)
    comparativeMentions: [{ type: String }],
    uniqueValuePropsHighlighted: [{ type: String }],
    
    // Query Performance
    relevanceScore: { type: Number, min: 0, max: 100, default: 0 },
    intentMatch: { type: Number, min: 0, max: 100, default: 0 },
    
    // Response Quality
    responseLength: { type: Number, default: 0 },
    responseCompleteness: { type: Number, min: 0, max: 100, default: 0 },
    
    // Overall Score
    overallScore: { type: Number, min: 0, max: 100, default: 0 }
  },
  
  // Status
  status: { 
    type: String, 
    enum: ['pending', 'processing', 'completed', 'failed'],
    default: 'pending',
    index: true
  },
  error: { type: String },
  
  // Timestamps
  testedAt: { type: Date, default: Date.now },
  scoredAt: { type: Date },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

// Indexes for efficient queries
promptTestSchema.index({ userId: 1, testedAt: -1 });
promptTestSchema.index({ promptId: 1, llmProvider: 1 });
promptTestSchema.index({ topicId: 1, status: 1 });
promptTestSchema.index({ status: 1, createdAt: 1 });

// Update timestamp on save
promptTestSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// Virtual for aggregated metrics
promptTestSchema.virtual('metrics').get(function() {
  return {
    visibility: this.scorecard.visibilityScore,
    depth: this.scorecard.mentionDepth,
    ranking: this.scorecard.rankingPosition,
    overall: this.scorecard.overallScore
  };
});

module.exports = mongoose.model('PromptTest', promptTestSchema);


